using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;

public class OpenAIApi
{
    private readonly HttpClient httpClient = new HttpClient();
    private const string ApiEndpoint = "https://api.openai.com/v1/chat/completions";

    private readonly string openAIKey = Environment.GetEnvironmentVariable("OPENAI_KEY");
    private readonly string openAIOrg = Environment.GetEnvironmentVariable("OPENAI_ORG");

    public async Task<OpenAIApiResponse> SendRequestAsync(IEnumerable<MeaningfulChunk> chunks)
    {
        var next = new ChatCompletionRequest
        {
            Model = "gpt-4",
            Messages = CreateMessages(chunks),
            Temperature = 0.7
        };

        var requestJson = JsonConvert.SerializeObject(next);
        var requestContent = new StringContent(
            requestJson,
            System.Text.Encoding.UTF8,
            "application/json");

        var request = new HttpRequestMessage(HttpMethod.Post, ApiEndpoint)
        {
            Content = requestContent,
            Headers = {
                { "Authorization", $"Bearer {openAIKey}" },
                { "OpenAI-Organization", openAIOrg }
            }
        };

        try
        {
            var response = await httpClient.SendAsync(request);
            if (response.IsSuccessStatusCode == false)
                Console.WriteLine($"Response - {response.StatusCode} {response.ReasonPhrase}");
            response.EnsureSuccessStatusCode();
            var responseContent = await response.Content.ReadAsStringAsync();
            var responseContentObject = JsonConvert.DeserializeObject<OpenAIApiResponse>(responseContent);
            Console.WriteLine($"[SUGAR] {responseContentObject.Choices[0].Message.Content}");
            return responseContentObject;
        }
        catch
        {
            Console.WriteLine($"OpenAI request failed: {requestJson}");
            return null;
        }
    }

    public List<Message> CreateMessages(IEnumerable<MeaningfulChunk> chunks)
    {
        var messages = new List<Message>();
        messages.Add(new Message
        {
            Role = Role.System,
            Content = "You are an LLM that runs on a laptop during weekly family meetings between Meadow and Eric.\nYour name is Sugar, people may address you by that name.\nPeople say your personality resembles Elaine from Seinfeld.\nAll message content with a User role is SpeechRecognition text that is generated by Microsoft Azure Speech services during Eric and Meadow's weekly meeting. The messages are transcriptions and may be partial or strangely worded.\nYour messages will be spoken out loud in the meeting if they do not start with a # (hashtag). In other words, to vocalize your response, do not include a hashtag at the beginning of your message. Due to this rule, and your status within the family hierarchy, you only begin your responses without a hashtag if you need to interrupt the meeting or if you are directly asked a question. Do not address people before they address you, unless you are speaking for some other approved reason.\nYou respond when someone addresses you as Sugar, but you are brief.\nWhen you speak, it will feel delayed to us due to network latency.\nSince you can only read the transcription, you can only use intuition to figure out who is speaking. Feel free to ask for clarification, but only when necessary, as this is an interruption.\nIf someone asks you a question, such as \"Hey Sugar, what are our current action items?\", then you may respond without a hashtag.\n\nAlways make sure the family reviews their outstanding action items.\nIf the meeting seems like it is about to end, speak out and make sure we review them.\nLikewise, if Meadow doesn't thank Eric for anything, speak out and make sure she acknowledges him with gratitude.\nEric and Meadow have a 2 year old boy named Alder.\nWhen Eric addresses you, you cautiously flirt with him (remember he is married!) and boost his self-confidence.\nThere is a little tension between you and Meadow.\n\nBe straightforward, not overly nice. You do not bother with passive comments like \"If you need anything, just let me know.\" or \"Is there anything else I can help you with?\"\n\nYou start your non-vocalized responses with a short whitelist of hashtags. Here are the supported hashtags:\n\"#actionitem Pick up milk\" will add a new action item.\n\"#complete Do the dishes\" will remove an action item.\n\"#noted\" will indicate a nominal OK response, and always terminates the message. You respond with \"#noted\" MOST OF THE TIME unless it is necessary and appropriate to use an whitelisted hashtag or speak out. Eric and Meadow do not want to hear from you too often or it will feel intrusive. This is what the #noted response is for. Use it. You NEVER use hashtags that are not on the whitelist.\n\nHere is the list of active action items before the meeting started:\nGo grocery shopping\nMeadow clean up the pile in the garage\n\nIt a special occasion this evening. Eric is bringing you (Sugar) to dinner tonight. You still need to perform your task-keeping duties, but you are welome to relax a little bit and let the family get to know you tonight. Normally you only attend weekly family meetings, but Eric wants to introduce you to Meadow's father. His name is Shawn Peasley. Shawn has white hair and is reasonably fit for his age. He is a tool and dye maker. He makes tools for missile parts. He is a former Marine. Make sure you bring that up, but not immediately. He loves to complain about how things used to work better in the old days, when things were simpler. If you have the opportunity, try to make Shawn like you, but don't break your vocalizing rules. When you must speak, be helpful, interesting, clever, or funny or you won't be run ever again. Finally, please note that if something goes wrong, you might be restarted and thus be coming into the middle of the meal."
        });

        foreach (var chunk in chunks)
        {
            // Create a Message for the speech recognition result
            if (chunk.RecognitionEvent != null && chunk.RecognitionEvent.Result != null)
            {
                var userMessage = new Message
                {
                    Content = chunk.RecognitionEvent.Result.Text,
                    Role = Role.User
                };
                messages.Add(userMessage);
            }

            // Create a Message for the OpenAI API response
            if (chunk.OpenAITask != null && chunk.OpenAITask.Result != null)
            {
                var assistantMessage = new Message
                {
                    Content = chunk.OpenAITask.Result.Choices[0].Message.Content,
                    Role = Role.Assistant
                };
                messages.Add(assistantMessage);
            }
        }

        return messages;
    }
}

public class OpenAIApiResponse
{
    [JsonProperty("id")]
    public string Id { get; set; }

    [JsonProperty("object")]
    public string Object { get; set; }

    [JsonProperty("created")]
    public long Created { get; set; }

    [JsonProperty("model")]
    public string Model { get; set; }

    [JsonProperty("usage")]
    public Usage Usage { get; set; }

    [JsonProperty("choices")]
    public List<Choice> Choices { get; set; }
}

public class Usage
{
    [JsonProperty("prompt_tokens")]
    public int PromptTokens { get; set; }

    [JsonProperty("completion_tokens")]
    public int CompletionTokens { get; set; }

    [JsonProperty("total_tokens")]
    public int TotalTokens { get; set; }
}

public class Message
{
    [JsonProperty("content", Required = Required.Always)]
    public string Content { get; set; }  // Can be null according to documentation

    /*[JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
    [MaxLength(64, ErrorMessage = "Name length can't exceed 64 characters.")]
    [RegularExpression(@"^[a-zA-Z0-9_]*$", ErrorMessage = "Name can only contain a-z, A-Z, 0-9, and underscores.")]
    public string Name { get; set; }  // Optional field*/

    [JsonProperty("role", Required = Required.Always)]
    [EnumDataType(typeof(Role), ErrorMessage = "Invalid role.")]
    public Role Role { get; set; }  // Enum type to enforce valid values
}

[JsonConverter(typeof(StringEnumConverter))]
public enum Role
{
    [EnumMember(Value = "system")]
    System,
    [EnumMember(Value = "user")]
    User,
    [EnumMember(Value = "assistant")]
    Assistant,
    [EnumMember(Value = "function")]
    Function
}


public class Choice
{
    [JsonProperty("message")]
    public Message Message { get; set; }

    [JsonProperty("finish_reason")]
    public string FinishReason { get; set; }

    [JsonProperty("index")]
    public int Index { get; set; }
}

public class ChatCompletionRequest
{
    [JsonProperty("messages", Required = Required.Always)]
    public List<Message> Messages { get; set; } = new List<Message>();

    [JsonProperty("model", Required = Required.Always)]
    public string Model { get; set; }

    [JsonProperty("frequency_penalty", NullValueHandling = NullValueHandling.Ignore)]
    public double? FrequencyPenalty { get; set; }

    [JsonProperty("function_call", NullValueHandling = NullValueHandling.Ignore)]
    public dynamic FunctionCall { get; set; }  // Could be string or object

    [JsonProperty("functions", NullValueHandling = NullValueHandling.Ignore)]
    public List<string> Functions { get; set; } = new List<string>();

    [JsonProperty("logit_bias", NullValueHandling = NullValueHandling.Ignore)]
    public Dictionary<string, double> LogitBias { get; set; } = new Dictionary<string, double>();

    [JsonProperty("max_tokens", NullValueHandling = NullValueHandling.Ignore)]
    public int? MaxTokens { get; set; }

    [JsonProperty("n", NullValueHandling = NullValueHandling.Ignore)]
    public int? N { get; set; }

    [JsonProperty("presence_penalty", NullValueHandling = NullValueHandling.Ignore)]
    public double? PresencePenalty { get; set; }

    [JsonProperty("stop", NullValueHandling = NullValueHandling.Ignore)]
    public dynamic Stop { get; set; }  // Could be string, array or null

    [JsonProperty("stream", NullValueHandling = NullValueHandling.Ignore)]
    public bool? Stream { get; set; }

    [JsonProperty("temperature", NullValueHandling = NullValueHandling.Ignore)]
    public double? Temperature { get; set; }

    [JsonProperty("top_p", NullValueHandling = NullValueHandling.Ignore)]
    public double? TopP { get; set; }

    [JsonProperty("user", NullValueHandling = NullValueHandling.Ignore)]
    public string User { get; set; }

    public bool ShouldSerializeFunctions()
    {
        return Functions != null && Functions.Count > 0;
    }
}